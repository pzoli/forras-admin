package hu.exprog.beecomposit.back.model;

import java.util.LinkedList;
import java.util.List;

import javax.persistence.CascadeType;

// Generated 2012.09.26. 11:18:58 by Hibernate Tools 4.0.0

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Version;

import hu.exprog.honeyweb.front.annotations.EntityFieldInfo;
import hu.exprog.honeyweb.front.annotations.LookupFieldInfo;

/**
 * Organizationunit generated by hbm2java
 */
@Entity
@Table(name = "organizationunit", schema = "public")
public class Organizationunit implements java.io.Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = -576319707322945129L;
    
    private Long id;
    @EntityFieldInfo(info="#{msg['organization-name']}", weight=1, required=true, editor="select")
    @LookupFieldInfo(keyField="id",labelField="name", detailDialogFile="/admin/organization-dialog")
    private Organization organization;
    @EntityFieldInfo(info="#{msg['organizationunit-name']}", weight=1, required=true, editor="txt")
    private String organizationunitName;
    @EntityFieldInfo(info="#{msg['short-name']}", weight=1, required=true, editor="txt")
    private String shortname;
    @EntityFieldInfo(info="#{msg['description']}", weight=1, required=true, editor="textarea")
    private String description;
    @EntityFieldInfo(info="#{msg['register-unit']}", weight=1, required=true, editor="booleancheckbox")
    private Boolean registerunit;
    @EntityFieldInfo(info="#{msg['registeronly-unit']}", weight=1, required=true, editor="booleancheckbox")
    private Boolean onlyregister;
    private Icon icon;
    @EntityFieldInfo(info="#{msg['addresses']}", weight=1, required=false, editor="manymenu", listable=false)
    @LookupFieldInfo(keyField="id",labelField="address", converter="addressesConverter", detailDialogFile="/admin/addresses-dialog", filterFunction="filterByAddress")
    private List<Addresses> addresses;
	@Version
	private Long version;

    public Organizationunit() {
    	this.addresses = new LinkedList<Addresses>();
    }

    public Organizationunit(Long id) {
        this.id = id;
    }

    public Organizationunit(Long id, Organization organization, String organizationunitName, String shortname, String description, Boolean registerunit, Boolean onlyregister, Icon icon) {
        this.id = id;
        this.organization = organization;
        this.organizationunitName = organizationunitName;
        this.shortname = shortname;
        this.description = description;
        this.registerunit = registerunit;
        this.onlyregister = onlyregister;
        this.icon = icon;
        this.addresses = new LinkedList<Addresses>();
    }

    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name = "organizationunitid", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne
    @JoinColumn(name = "organization")
    public Organization getOrganization() {
        return this.organization;
    }

    public void setOrganization(Organization organization) {
        this.organization = organization;
    }

    @Column(name = "organizationunit", length = 128)
    public String getOrganizationunitName() {
        return this.organizationunitName;
    }

    public void setOrganizationunitName(String organizationunit) {
        this.organizationunitName = organizationunit;
    }

    @Column(name = "shortname", length = 8)
    public String getShortname() {
        return this.shortname;
    }

    public void setShortname(String shortname) {
        this.shortname = shortname;
    }

    @Column(name = "description")
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "registerunit")
    public Boolean getRegisterunit() {
        return this.registerunit;
    }

    public void setRegisterunit(Boolean registerunit) {
        this.registerunit = registerunit;
    }

    @Column(name = "onlyregister")
    public Boolean getOnlyregister() {
        return this.onlyregister;
    }

    public void setOnlyregister(Boolean onlyregister) {
        this.onlyregister = onlyregister;
    }

    @ManyToOne
    @JoinColumn(name = "icon")
    public Icon getIcon() {
        return this.icon;
    }

    public void setIcon(Icon icon) {
        this.icon = icon;
    }

    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinTable(name = "organization_address", joinColumns = { @JoinColumn(name = "organizationid", referencedColumnName = "organizationunitid") }, inverseJoinColumns = { @JoinColumn(name = "addressid", referencedColumnName = "id") })
	public List<Addresses> getAddresses() {
		return addresses;
	}

	public void setAddresses(List<Addresses> addresses) {
		this.addresses = addresses;
	}

	public Long getVersion() {
		return version;
	}

	public void setVersion(Long version) {
		this.version = version;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((addresses == null) ? 0 : addresses.hashCode());
		result = prime * result + ((organization == null) ? 0 : organization.hashCode());
		result = prime * result + ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((icon == null) ? 0 : icon.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((onlyregister == null) ? 0 : onlyregister.hashCode());
		result = prime * result + ((organizationunitName == null) ? 0 : organizationunitName.hashCode());
		result = prime * result + ((registerunit == null) ? 0 : registerunit.hashCode());
		result = prime * result + ((shortname == null) ? 0 : shortname.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Organizationunit other = (Organizationunit) obj;
		if (addresses == null) {
			if (other.addresses != null)
				return false;
		} else if (!addresses.equals(other.addresses))
			return false;
		if (organization == null) {
			if (other.organization != null)
				return false;
		} else if (!organization.equals(other.organization))
			return false;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (icon == null) {
			if (other.icon != null)
				return false;
		} else if (!icon.equals(other.icon))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (onlyregister == null) {
			if (other.onlyregister != null)
				return false;
		} else if (!onlyregister.equals(other.onlyregister))
			return false;
		if (organizationunitName == null) {
			if (other.organizationunitName != null)
				return false;
		} else if (!organizationunitName.equals(other.organizationunitName))
			return false;
		if (registerunit == null) {
			if (other.registerunit != null)
				return false;
		} else if (!registerunit.equals(other.registerunit))
			return false;
		if (shortname == null) {
			if (other.shortname != null)
				return false;
		} else if (!shortname.equals(other.shortname))
			return false;
		return true;
	}    
}
